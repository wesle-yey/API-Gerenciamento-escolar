name: CI/CD Pipeline - Sistema de Gerenciamento Escolar

on:
  push:
    branches: [main, develop, autenticacao]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Executar Testes
    runs-on: ubuntu-latest

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Instalar dependências
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Configurar variáveis de ambiente
        run: |
          echo "DATABASE_URL=sqlite:///:memory:" >> $GITHUB_ENV
          echo "SECRET_KEY=test_secret_key_for_github_actions" >> $GITHUB_ENV
          echo "ALGORITHM=HS256" >> $GITHUB_ENV
          echo "ENVIRONMENT=test" >> $GITHUB_ENV
          echo "CORS_ORIGINS=http://localhost:3000,http://localhost:8000" >> $GITHUB_ENV

      - name: Executar testes
        run: |
          pytest tests/ -v --tb=short

      - name: Upload cobertura
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  security:
    name: Verificação de Segurança
    runs-on: ubuntu-latest

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Instalar dependências
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Executar Bandit (análise de segurança)
        run: |
          bandit -r . -f json -o bandit-report.json || echo "Bandit completed with warnings"
          bandit -r . -ll || echo "Bandit security scan completed"

      - name: Executar Safety (verificação de dependências)
        run: |
          safety check -r requirements.txt --json --output safety-report.json || echo "Safety check completed with warnings"
          safety check -r requirements.txt || echo "Safety dependency check completed"

      - name: Upload relatórios de segurança
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  docker:
    name: Build e Push da Imagem Docker
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login no Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extrair metadados
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/gerenciamento-escolar
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build e push da imagem
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  notify:
    name: Notificação de Status
    runs-on: ubuntu-latest
    needs: [test, security, docker]
    if: always()

    steps:
      - name: Verificar status dos jobs
        run: |
          echo "📊 Status dos Jobs:"
          echo "🧪 Testes: ${{ needs.test.result }}"
          echo "🔒 Segurança: ${{ needs.security.result }}"
          echo "🐳 Docker: ${{ needs.docker.result }}"

      - name: Notificar sucesso
        if: ${{ needs.test.result == 'success' && needs.security.result == 'success' && (needs.docker.result == 'success' || needs.docker.result == 'skipped') }}
        run: |
          echo "✅ Pipeline executado com sucesso!"
          echo "🎉 Todos os jobs passaram com sucesso!"

      - name: Notificar falha
        if: ${{ needs.test.result == 'failure' || needs.security.result == 'failure' || needs.docker.result == 'failure' }}
        run: |
          echo "❌ Pipeline falhou!"
          echo "🔍 Verifique os logs para mais detalhes"
          echo "📋 Jobs com falha:"
          if [ "${{ needs.test.result }}" == "failure" ]; then
            echo "  - 🧪 Testes falharam"
          fi
          if [ "${{ needs.security.result }}" == "failure" ]; then
            echo "  - 🔒 Verificação de segurança falhou"
          fi
          if [ "${{ needs.docker.result }}" == "failure" ]; then
            echo "  - 🐳 Build Docker falhou"
          fi
          exit 1

      - name: Notificar cancelamento
        if: ${{ needs.test.result == 'cancelled' || needs.security.result == 'cancelled' || needs.docker.result == 'cancelled' }}
        run: |
          echo "⚠️ Pipeline foi cancelada!"
          echo "🔄 Alguns jobs foram cancelados"
